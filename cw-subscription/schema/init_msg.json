{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InitMsg",
  "type": "object",
  "required": [
    "params"
  ],
  "properties": {
    "params": {
      "$ref": "#/definitions/Params"
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Params": {
      "type": "object",
      "required": [
        "required_deposit_plan",
        "required_deposit_subscription"
      ],
      "properties": {
        "required_deposit_plan": {
          "description": "Minimal native tokens deposit need for each plan, will refunded after deleted",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "required_deposit_subscription": {
          "description": "Minimal native tokens deposit need for each subscription, will refunded after deleted",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
